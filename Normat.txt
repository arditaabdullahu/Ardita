import javax.swing.*;
public class Normat 
{
	public static double[] mbushjaEVektoreve(int n)  //ne kete metode kam bere mbushjen e vektoreve
	{
      double[] d = new double[n];
      for(int i = 0; i < n; i++) 
      {
         String fillimi = JOptionPane.showInputDialog("Type element " + i);
         d[i] = Double.parseDouble(fillimi);
      }
      return d;
   }
   
   public static double[][] mbushjaEMatricave() //mbushja e matricave sepse ne detyre eshte kerkuar se pari te behet mbushja e vektoreve dhe matricave me ane te metodave
   {
      String rreshta = JOptionPane.showInputDialog("Type the number of rows");
      int r = new Integer(rreshta).intValue();
      String kolona = JOptionPane.showInputDialog("Type the number of columns");
      int k = new Integer(kolona).intValue();
      double[][] d = new double[r][k];
      for(int i = 0; i < r; i++) 
      {
         for(int j = 0; j < k; j++) 
         {
            String fillimi = JOptionPane.showInputDialog("Type the element of: row " + i + ", column " + j);
            d[i][j] = Double.parseDouble(fillimi);
         }
      }
      return d;
   }
   
   public double[] gjejeMbledhjen(double[] n, double[] m) //per mbledhje
   {
      double[] pergjigjja = new double[n.length];
      for(int i = 0; i < pergjigjja.length; i++) 
      {
    	  pergjigjja[i] = n[i] + m[i];
      }
      return pergjigjja;
   }
   
   public static double[] gjejeNdryshimin(double[] n, double[] m) //ndryshimi 
   {
      double[] ndryshimi = new double[n.length];
      for(int i = 0; i < ndryshimi.length; i++)
      {
         ndryshimi[i] = n[i] - m[i];
      }
      return ndryshimi;
   }
   
   public static double gjejeL2(double[] n)    
   {
      double pergjigjja = 0.0;
      for(int i = 0; i < n.length; i++)
      {
    	  pergjigjja += Math.pow(n[i], 2);
      }
      return Math.sqrt(pergjigjja);
   }
   
   public static double gjejeLInfinitNormen(double[] n)  //L infinit ku duhet ta gjejm maksimumin
   {
      double max = Math.abs(n[0]);
      for(int i = 0; i < n.length; i++)
      {
         if(Math.abs(n[i]) > max)
            max = Math.abs(n[i]);
      }
      return max;
   }
   
   public static double gjejeDiferencenEuklidiane(double[] n, double[] m)
   {
      double distanca = 0.0;
      for(int i = 0; i < n.length; i++)
      {
         distanca += Math.pow(n[i] + m[i], 2);
      }
      return Math.sqrt(distanca);
   }
   
   public static double gjejeDistancenMaksimale(double[] n, double[] m)
   {
      double max = Math.abs(n[0] - m[0]);
      for(int i = 0; i < n.length; i++) 
      {
         if(Math.abs(n[i] - m[i]) > max)
            max = Math.abs(n[i] - m[i]);
      }
      return max;
   }
   
   public static double findLInfinit(double[][] n)
   {
      double max = 0.0;
      for(int i = 0; i < n.length; i++) 
      {
    	  double pergjigjja = 0.0;
          for(int j = 0; j < n.length; j++) 
         {
        	 pergjigjja += Math.abs(n[i][j]);
         }
         if(max < pergjigjja)
         {
            max = pergjigjja;
         }
        
      }
      return max;
   }
   
   public static double gjejeFrobenius(double[][] n) 
   {
      double pergjigjja = 0.0;
      for(int i = 0; i < n.length; i++) 
      {
         for(int j = 0; j < n.length; j++)
         {
        	pergjigjja  += Math.pow(n[i][j], 2);
         }
      }
      return Math.sqrt(pergjigjja);
   }
}